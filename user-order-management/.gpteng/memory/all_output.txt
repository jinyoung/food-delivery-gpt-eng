Let's start by creating the `pom.xml` file which will define the Maven project, its dependencies, and properties.

pom.xml
```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>user-order-management</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.3</version>
    </parent>

    <properties>
        <java.version>17</java.version>
        <spring-cloud.version>2021.0.3</spring-cloud.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Web, includes RESTful application support -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Starter Data JPA, includes spring-data-rest -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- H2 Database Engine -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Lombok for boilerplate code reduction -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Spring Cloud Stream -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream</artifactId>
            <version>3.1.3</version>
        </dependency>

        <!-- Spring Cloud Stream Binder for Kafka -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream-binder-kafka</artifactId>
        </dependency>

        <!-- JUnit Jupiter for testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
```

Next, we will create the `run.sh` file which will be used to execute Maven commands.

run.sh
```sh
#!/bin/bash
mvn spring-boot:run --no-transfer-progress
```

Make sure to give execution permission to the `run.sh` file:

```sh
chmod +x run.sh
```

Now, let's start implementing the Java classes based on the Event Storming Model provided. We will follow the Clean Architecture approach, which typically involves organizing the code into layers such as `entities`, `use_cases`, `interfaces`, and `frameworks_drivers`.

We will start with the domain entities and value objects.

src/main/java/com/example/userordermanagement/domain/Address.java
```java
package com.example.userordermanagement.domain;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Address {
    // Assuming Address fields, add them as per your requirements
    private String street;
    private String city;
    private String state;
    private String zipCode;
    private String country;
}
```

src/main/java/com/example/userordermanagement/domain/Money.java
```java
package com.example.userordermanagement.domain;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Money {
    private BigDecimal amount;
    private String currency;
}
```

src/main/java/com/example/userordermanagement/domain/Order.java
```java
package com.example.userordermanagement.domain;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.GenericGenerator;

import java.util.UUID;

@Entity
@Table(name = "orders")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Order {
    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    private UUID orderId;

    private String foodSelection;
    private Integer quantity;
    private String specialRequest;

    @Embedded
    private Address deliveryAddress;

    private String paymentMethod;
    private String paymentMethodType;

    @Embedded
    private Money orderAmount;

    private String orderStatus;
    private String estimatedDeliveryTime;
}
```

Next, we will create the repository interface for the `Order` entity.

src/main/java/com/example/userordermanagement/repository/OrderRepository.java
```java
package com.example.userordermanagement.repository;

import com.example.userordermanagement.domain.Order;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.UUID;

@Repository
public interface OrderRepository extends JpaRepository<Order, UUID> {
}
```

Now, let's define the commands and events as per the Event Storming Model.

src/main/java/com/example/userordermanagement/commands/PlaceOrderCommand.java
```java
package com.example.userordermanagement.commands;

import com.example.userordermanagement.domain.Address;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class PlaceOrderCommand {
    private String foodSelection;
    private Integer quantity;
    private String specialRequest;
    private Address deliveryAddress;
    private String paymentMethod;
}
```

src/main/java/com/example/userordermanagement/commands/CancelOrderCommand.java
```java
package com.example.userordermanagement.commands;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class CancelOrderCommand {
    private UUID orderId;
}
```

src/main/java/com/example/userordermanagement/commands/CheckPreviousOrdersCommand.java
```java
package com.example.userordermanagement.commands;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class CheckPreviousOrdersCommand {
    // This command might include fields like userId to check orders for a specific user
}
```

src/main/java/com/example/userordermanagement/commands/ConfirmOrderCommand.java
```java
package com.example.userordermanagement.commands;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ConfirmOrderCommand {
    private UUID orderId;
}
```

src/main/java/com/example/userordermanagement/events/OrderPlacedEvent.java
```java
package com.example.userordermanagement.events;

import com.example.userordermanagement.domain.Address;
import com.example.userordermanagement.domain.Money;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class OrderPlacedEvent {
    private UUID orderId;
    private String foodSelection;
    private Integer quantity;
    private String specialRequest;
    private Address deliveryAddress;
    private String paymentMethod;
    private Money orderAmount;
}
```

src/main/java/com/example/userordermanagement/events/OrderCancelledEvent.java
```java
package com.example.userordermanagement.events;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class OrderCancelledEvent {
    private UUID orderId;
}
```

src/main/java/com/example/userordermanagement/events/PreviousOrdersCheckedEvent.java
```java
package com.example.userordermanagement.events;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class PreviousOrdersCheckedEvent {
    // This event might include fields like a list of orders if needed
}
```

Next, we will create the application services that will handle the commands and publish the events.

src/main/java/com/example/userordermanagement/service/OrderService.java
```java
package com.example.userordermanagement.service;

import com.example.userordermanagement.commands.CancelOrderCommand;
import com.example.userordermanagement.commands.CheckPreviousOrdersCommand;
import com.example.userordermanagement.commands.ConfirmOrderCommand;
import com.example.userordermanagement.commands.PlaceOrderCommand;
import com.example.userordermanagement.domain.Order;
import com.example.userordermanagement.events.OrderCancelledEvent;
import com.example.userordermanagement.events.OrderPlacedEvent;
import com.example.userordermanagement.events.PreviousOrdersCheckedEvent;
import com.example.userordermanagement.repository.OrderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.UUID;

@Service
public class OrderService {
    private final OrderRepository orderRepository;

    @Autowired
    public OrderService(OrderRepository orderRepository) {
        this.orderRepository = orderRepository;
    }

    @Transactional
    public OrderPlacedEvent placeOrder(PlaceOrderCommand command) {
        // Logic to place an order
        Order order = new Order();
        // Set properties from command to order
        order = orderRepository.save(order);
        // Publish OrderPlacedEvent
        return new OrderPlacedEvent(order.getOrderId(), order.getFoodSelection(), order.getQuantity(),
                order.getSpecialRequest(), order.getDeliveryAddress(), order.getPaymentMethod(), order.getOrderAmount());
    }

    @Transactional
    public OrderCancelledEvent cancelOrder(CancelOrderCommand command) {
        // Logic to cancel an order
        Order order = orderRepository.findById(command.getOrderId()).orElseThrow();
        orderRepository.delete(order);
        // Publish OrderCancelledEvent
        return new OrderCancelledEvent(order.getOrderId());
    }

    @Transactional(readOnly = true)
    public PreviousOrdersCheckedEvent checkPreviousOrders(CheckPreviousOrdersCommand command) {
        // Logic to check previous orders
        // Publish PreviousOrdersCheckedEvent
        return new PreviousOrdersCheckedEvent();
    }

    @Transactional
    public void confirmOrder(ConfirmOrderCommand command) {
        // Logic to confirm an order
        Order order = orderRepository.findById(command.getOrderId()).orElseThrow();
        // Update order status to confirmed
        // No event is published in this example, but in a real scenario, you might publish an event
    }
}
```

Now, let's create the REST controller that will expose the endpoints to interact with the Order service.

src/main/java/com/example/userordermanagement/controller/OrderController.java
```java
package com.example.userordermanagement.controller;

import com.example.userordermanagement.commands.CancelOrderCommand;
import com.example.userordermanagement.commands.CheckPreviousOrdersCommand;
import com.example.userordermanagement.commands.ConfirmOrderCommand;
import com.example.userordermanagement.commands.PlaceOrderCommand;
import com.example.userordermanagement.events.OrderCancelledEvent;
import com.example.userordermanagement.events.OrderPlacedEvent;
import com.example.userordermanagement.events.PreviousOrdersCheckedEvent;
import com.example.userordermanagement.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@RestController
@RequestMapping("/orders")
public class OrderController {
    private final OrderService orderService;

    @Autowired
    public OrderController(OrderService orderService) {
        this.orderService = orderService;
    }

    @PostMapping
    public ResponseEntity<OrderPlacedEvent> placeOrder(@RequestBody PlaceOrderCommand command) {
        OrderPlacedEvent event = orderService.placeOrder(command);
        return ResponseEntity.ok(event);
    }

    @DeleteMapping("/{orderId}")
    public ResponseEntity<OrderCancelledEvent> cancelOrder(@PathVariable UUID orderId) {
        CancelOrderCommand command = new CancelOrderCommand(orderId);
        OrderCancelledEvent event = orderService.cancelOrder(command);
        return ResponseEntity.ok(event);
    }

    @GetMapping("/previous")
    public ResponseEntity<PreviousOrdersCheckedEvent> checkPreviousOrders() {
        CheckPreviousOrdersCommand command = new CheckPreviousOrdersCommand();
        PreviousOrdersCheckedEvent event = orderService.checkPreviousOrders(command);
        return ResponseEntity.ok(event);
    }

    @PostMapping("/{orderId}/confirm")
    public ResponseEntity<Void> confirmOrder(@PathVariable UUID orderId) {
        ConfirmOrderCommand command = new ConfirmOrderCommand(orderId);
        orderService.confirmOrder(command);
        return ResponseEntity.ok().build();
    }
}
```

Finally, let's create the main application class that will bootstrap the Spring Boot application.

src/main/java/com/example/userordermanagement/UserOrderManagementApplication.java
```java
package com.example.userordermanagement;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class UserOrderManagementApplication {
    public static void main(String[] args) {
        SpringApplication.run(UserOrderManagementApplication.class, args);
    }
}
```

To complete the setup, we need to create a test class for the `OrderService`.

src/test/java/com/example/userordermanagement/service/OrderServiceTest.java
```java
package com.example.userordermanagement.service;

import com.example.userordermanagement.commands.PlaceOrderCommand;
import com.example.userordermanagement.domain.Address;
import com.example.userordermanagement.domain.Order;
import com.example.userordermanagement.events.OrderPlacedEvent;
import com.example.userordermanagement.repository.OrderRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@SpringBootTest
public class OrderServiceTest {
    @Mock
    private OrderRepository orderRepository;

    @InjectMocks
    private OrderService orderService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testPlaceOrder() {
        // Given
        PlaceOrderCommand command = new PlaceOrderCommand("Pizza", 2, "Extra cheese", new Address(), "Credit Card");
        Order order = new Order();
        order.setOrderId(UUID.randomUUID());
        when(orderRepository.save(any(Order.class))).thenReturn(order);

        // When
        OrderPlacedEvent event = orderService.placeOrder(command);

        // Then
        assertNotNull(event);
        assertNotNull(event.getOrderId());
    }
}
```

This concludes a fully working implementation.